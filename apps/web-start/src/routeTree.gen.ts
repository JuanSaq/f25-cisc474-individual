/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CourseIndexRouteImport } from './routes/course/index'
import { Route as CourseEditNavRouteImport } from './routes/course/edit-nav'
import { Route as CourseEditRouteImport } from './routes/course/edit'
import { Route as CourseDeleteRouteImport } from './routes/course/delete'
import { Route as CourseCreateRouteImport } from './routes/course/create'
import { Route as CourseCourseIdIndexRouteImport } from './routes/course/$courseId/index'
import { Route as CourseCourseIdGradesRouteImport } from './routes/course/$courseId/grades'
import { Route as CourseCourseIdAssignmentsRouteImport } from './routes/course/$courseId/assignments'
import { Route as CourseCourseIdAnnoucementsRouteImport } from './routes/course/$courseId/annoucements'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseIndexRoute = CourseIndexRouteImport.update({
  id: '/course/',
  path: '/course/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseEditNavRoute = CourseEditNavRouteImport.update({
  id: '/course/edit-nav',
  path: '/course/edit-nav',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseEditRoute = CourseEditRouteImport.update({
  id: '/course/edit',
  path: '/course/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseDeleteRoute = CourseDeleteRouteImport.update({
  id: '/course/delete',
  path: '/course/delete',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCreateRoute = CourseCreateRouteImport.update({
  id: '/course/create',
  path: '/course/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCourseIdIndexRoute = CourseCourseIdIndexRouteImport.update({
  id: '/course/$courseId/',
  path: '/course/$courseId/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCourseIdGradesRoute = CourseCourseIdGradesRouteImport.update({
  id: '/course/$courseId/grades',
  path: '/course/$courseId/grades',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCourseIdAssignmentsRoute =
  CourseCourseIdAssignmentsRouteImport.update({
    id: '/course/$courseId/assignments',
    path: '/course/$courseId/assignments',
    getParentRoute: () => rootRouteImport,
  } as any)
const CourseCourseIdAnnoucementsRoute =
  CourseCourseIdAnnoucementsRouteImport.update({
    id: '/course/$courseId/annoucements',
    path: '/course/$courseId/annoucements',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/course/create': typeof CourseCreateRoute
  '/course/delete': typeof CourseDeleteRoute
  '/course/edit': typeof CourseEditRoute
  '/course/edit-nav': typeof CourseEditNavRoute
  '/course': typeof CourseIndexRoute
  '/course/$courseId/annoucements': typeof CourseCourseIdAnnoucementsRoute
  '/course/$courseId/assignments': typeof CourseCourseIdAssignmentsRoute
  '/course/$courseId/grades': typeof CourseCourseIdGradesRoute
  '/course/$courseId': typeof CourseCourseIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/course/create': typeof CourseCreateRoute
  '/course/delete': typeof CourseDeleteRoute
  '/course/edit': typeof CourseEditRoute
  '/course/edit-nav': typeof CourseEditNavRoute
  '/course': typeof CourseIndexRoute
  '/course/$courseId/annoucements': typeof CourseCourseIdAnnoucementsRoute
  '/course/$courseId/assignments': typeof CourseCourseIdAssignmentsRoute
  '/course/$courseId/grades': typeof CourseCourseIdGradesRoute
  '/course/$courseId': typeof CourseCourseIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/course/create': typeof CourseCreateRoute
  '/course/delete': typeof CourseDeleteRoute
  '/course/edit': typeof CourseEditRoute
  '/course/edit-nav': typeof CourseEditNavRoute
  '/course/': typeof CourseIndexRoute
  '/course/$courseId/annoucements': typeof CourseCourseIdAnnoucementsRoute
  '/course/$courseId/assignments': typeof CourseCourseIdAssignmentsRoute
  '/course/$courseId/grades': typeof CourseCourseIdGradesRoute
  '/course/$courseId/': typeof CourseCourseIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/course/create'
    | '/course/delete'
    | '/course/edit'
    | '/course/edit-nav'
    | '/course'
    | '/course/$courseId/annoucements'
    | '/course/$courseId/assignments'
    | '/course/$courseId/grades'
    | '/course/$courseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/course/create'
    | '/course/delete'
    | '/course/edit'
    | '/course/edit-nav'
    | '/course'
    | '/course/$courseId/annoucements'
    | '/course/$courseId/assignments'
    | '/course/$courseId/grades'
    | '/course/$courseId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/course/create'
    | '/course/delete'
    | '/course/edit'
    | '/course/edit-nav'
    | '/course/'
    | '/course/$courseId/annoucements'
    | '/course/$courseId/assignments'
    | '/course/$courseId/grades'
    | '/course/$courseId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  CourseCreateRoute: typeof CourseCreateRoute
  CourseDeleteRoute: typeof CourseDeleteRoute
  CourseEditRoute: typeof CourseEditRoute
  CourseEditNavRoute: typeof CourseEditNavRoute
  CourseIndexRoute: typeof CourseIndexRoute
  CourseCourseIdAnnoucementsRoute: typeof CourseCourseIdAnnoucementsRoute
  CourseCourseIdAssignmentsRoute: typeof CourseCourseIdAssignmentsRoute
  CourseCourseIdGradesRoute: typeof CourseCourseIdGradesRoute
  CourseCourseIdIndexRoute: typeof CourseCourseIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/': {
      id: '/course/'
      path: '/course'
      fullPath: '/course'
      preLoaderRoute: typeof CourseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/edit-nav': {
      id: '/course/edit-nav'
      path: '/course/edit-nav'
      fullPath: '/course/edit-nav'
      preLoaderRoute: typeof CourseEditNavRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/edit': {
      id: '/course/edit'
      path: '/course/edit'
      fullPath: '/course/edit'
      preLoaderRoute: typeof CourseEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/delete': {
      id: '/course/delete'
      path: '/course/delete'
      fullPath: '/course/delete'
      preLoaderRoute: typeof CourseDeleteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/create': {
      id: '/course/create'
      path: '/course/create'
      fullPath: '/course/create'
      preLoaderRoute: typeof CourseCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseId/': {
      id: '/course/$courseId/'
      path: '/course/$courseId'
      fullPath: '/course/$courseId'
      preLoaderRoute: typeof CourseCourseIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseId/grades': {
      id: '/course/$courseId/grades'
      path: '/course/$courseId/grades'
      fullPath: '/course/$courseId/grades'
      preLoaderRoute: typeof CourseCourseIdGradesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseId/assignments': {
      id: '/course/$courseId/assignments'
      path: '/course/$courseId/assignments'
      fullPath: '/course/$courseId/assignments'
      preLoaderRoute: typeof CourseCourseIdAssignmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseId/annoucements': {
      id: '/course/$courseId/annoucements'
      path: '/course/$courseId/annoucements'
      fullPath: '/course/$courseId/annoucements'
      preLoaderRoute: typeof CourseCourseIdAnnoucementsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  CourseCreateRoute: CourseCreateRoute,
  CourseDeleteRoute: CourseDeleteRoute,
  CourseEditRoute: CourseEditRoute,
  CourseEditNavRoute: CourseEditNavRoute,
  CourseIndexRoute: CourseIndexRoute,
  CourseCourseIdAnnoucementsRoute: CourseCourseIdAnnoucementsRoute,
  CourseCourseIdAssignmentsRoute: CourseCourseIdAssignmentsRoute,
  CourseCourseIdGradesRoute: CourseCourseIdGradesRoute,
  CourseCourseIdIndexRoute: CourseCourseIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
