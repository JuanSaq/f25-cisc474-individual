generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String?       @unique
  name        String?
  courses     Course[]
  profile     Profile?
  submissions Submission[]

  authentications Authentication[]
}

model Profile {
  id       String @id @default(uuid())
  bio      String
  pronouns String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  ownerId     String
  assignments Assignment[]
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dueDate     DateTime?
  title       String
  description String?
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Submission {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  submittedAt  DateTime?
  assignmentId String
  ownerId      String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Authentication {
  id         String @id @default(uuid())
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  provider   String
  providerId String
}